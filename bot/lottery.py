import uuid
from datetime import datetime
from enum import Enum
from zoneinfo import ZoneInfo

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.constants import ChatMemberStatus
from telegram.ext import ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, \
    filters, ContextTypes

import re

from bot.randomiser import Randomiser
from services.utils import encode_payload
from services.firebase import FirebaseClient



def parse_date(date_str: str) -> datetime | None:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ datetime, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É 'dd.mm.yyyy hh:mm',
    –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    try:
        date = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
        moscow_time = date.replace(tzinfo=ZoneInfo("Europe/Moscow"))
        return moscow_time.astimezone(ZoneInfo("UTC"))
    except ValueError:
        return None

class Lottery:
    class NewLotteryState(Enum):
        READY = 0
        TEXT = 1
        NUM_WINNERS = 2
        MODE = 3
        DATE = 4
        COUNT = 5
        PUBLISHER = 6


    def __init__(self, firebase: FirebaseClient, randomiser: Randomiser):
        self.firebase_db = firebase
        self.randomise_job = randomiser
        self.mode_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ –¥–∞—Ç–µ", callback_data="mode_date")],
            [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ —á–∏—Å–ª—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="mode_count")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_data")]
        ])
        self.back_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_data")]
            ])

        self.lottery_text_guide = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤–º–µ—Å—Ç–µ —Å–æ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
        self.lottery_num_winners_guide = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π."
        self.lottery_mode_guide = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞."
        self.lottery_date_guide = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ –ú–°–ö. –ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2023 00:00"
        self.lottery_count_guide = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è."
        self.lottery_publisher_guide = "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞."

    async def get_publisher_channels_keyboard(self, update: Update,
                                        context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞.
        """
        channels = await self.firebase_db.get_user_channels(update.effective_user.id)
        keyboard = []
        for i, channel in enumerate(channels):
            match = re.search(r'>([^<]+)<', channel["username"])
            title = match.group(1) if match else "–ö–∞–Ω–∞–ª"
            button = InlineKeyboardButton(text=title, callback_data=f"{channel['chat_id']}")
            keyboard.append([button])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_data")])
        return InlineKeyboardMarkup(keyboard)

    def get_handler(self):
        return ConversationHandler(
            entry_points=[
                CommandHandler("new_lot", self.new_lot),
                MessageHandler(filters.TEXT & filters.Regex("^üéâ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à$"), self.new_lot),
            ],
            states={
                self.NewLotteryState.READY.value: [
                    CallbackQueryHandler(self.setup_lot)
                ],
                self.NewLotteryState.TEXT.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.lottery_text),
                ],
                self.NewLotteryState.NUM_WINNERS.value: [
                    CallbackQueryHandler(self.lottery_num_winners),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.lottery_num_winners),
                ],
                self.NewLotteryState.MODE.value: [
                    CallbackQueryHandler(self.lottery_mode)
                ],
                self.NewLotteryState.DATE.value: [
                    CallbackQueryHandler(self.lottery_date),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.lottery_date),
                ],
                self.NewLotteryState.COUNT.value: [
                    CallbackQueryHandler(self.lottery_count),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.lottery_count),
                ],
                self.NewLotteryState.PUBLISHER.value: [
                    CallbackQueryHandler(self.lottery_publisher),
                ]
            },
            fallbacks=[],
        )

    async def create_channel_list_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="ready")]])
        user_id = update.effective_user.id
        channels = await self.firebase_db.get_user_channels(user_id)
        message = await update.message.reply_text(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, "
            "–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n\n–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –±–æ—Ç:\n" +
            "\n".join(f'{c["username"]} ({c["status"]})' for c in sorted(channels, key=lambda x: x["username"])),
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await self.firebase_db.update(f"users/{user_id}", {"added_channels_message": message.message_id})

    async def update_channel_list_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.my_chat_member.from_user
        user_id = user.id
        channels = await self.firebase_db.get_user_channels(user_id)
        added_msg_id = (await self.firebase_db.read(f"users/{user_id}/added_channels_message")) or 0
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="ready")]])
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=added_msg_id,
            text="–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, "
                 "–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n\n–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –±–æ—Ç:\n" +
                 "\n".join(f'{c["username"]} ({c["status"]})' for c in sorted(channels, key=lambda x: x["username"])),
            parse_mode="HTML",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

    async def new_lot(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["lottery_id"] = str(uuid.uuid4())[:8]
        await self.create_channel_list_message(update, context)
        return self.NewLotteryState.READY.value

    async def setup_lot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = update.effective_user.id
        channels = await self.firebase_db.get_user_channels(user_id)

        if not channels:
            await query.answer("–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª!", show_alert=True)
            return self.NewLotteryState.READY.value
        if not all(c["status"] == ChatMemberStatus.ADMINISTRATOR for c in channels):
            await query.answer("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö, –≥–¥–µ –æ–Ω –µ—Å—Ç—å!", show_alert=True)
            return self.NewLotteryState.READY.value

        await query.edit_message_text(self.lottery_text_guide)
        return self.NewLotteryState.TEXT.value

    async def lottery_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        description = update.message
        await self.firebase_db.write(f"lotteries/{update.effective_user.id}/{context.user_data['lottery_id']}", {
            "description": description.text
        })
        await update.message.reply_text(self.lottery_num_winners_guide,
                                        reply_markup=self.back_keyboard)
        return self.NewLotteryState.NUM_WINNERS.value


    async def lottery_num_winners(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        if update.callback_query:
            query = update.callback_query
            if query.data == "back_data":
                await query.edit_message_text(self.lottery_text_guide)
                return self.NewLotteryState.TEXT.value
            return self.NewLotteryState.NUM_WINNERS.value

        num_winners = update.message.text
        if num_winners.isdigit():
            await self.firebase_db.update(f"lotteries/{update.effective_user.id}/{context.user_data['lottery_id']}", {
                "num_winners": int(num_winners)
            })
            await update.message.reply_text(self.lottery_mode_guide, reply_markup=self.mode_keyboard)
            return self.NewLotteryState.MODE.value

        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).",
                                        reply_markup=self.back_keyboard)
        return self.NewLotteryState.NUM_WINNERS.value


    async def lottery_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query

        if query.data == "mode_date":
            await query.edit_message_text(self.lottery_date_guide, reply_markup=self.back_keyboard)
            return self.NewLotteryState.DATE.value
        elif query.data == "mode_count":
            await query.edit_message_text(self.lottery_count_guide,
                                          reply_markup=self.back_keyboard)
            return self.NewLotteryState.COUNT.value

        await query.edit_message_text(self.lottery_num_winners_guide,
                                      reply_markup=self.back_keyboard)
        return self.NewLotteryState.NUM_WINNERS.value


    async def lottery_count(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        if update.callback_query:
            query = update.callback_query
            if query.data == "back_data":
                await query.edit_message_text(self.lottery_mode_guide,
                                              reply_markup=self.mode_keyboard)
                return self.NewLotteryState.MODE.value
            return self.NewLotteryState.COUNT.value

        count_str = update.message.text
        publisher_keyboard = await self.get_publisher_channels_keyboard(update, context)
        if count_str.isdigit():
            await self.firebase_db.update(f"lotteries/{update.effective_user.id}/{context.user_data['lottery_id']}", {
                "max_count": int(count_str),
            })
            await update.message.reply_text(self.lottery_publisher_guide,
                                            reply_markup=publisher_keyboard)
            return self.NewLotteryState.PUBLISHER.value

        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).",
                                        reply_markup=self.back_keyboard)
        return self.NewLotteryState.COUNT.value


    async def lottery_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        if update.callback_query:
            query = update.callback_query
            if query.data == "back_data":
                await query.edit_message_text(self.lottery_mode_guide,
                                              reply_markup=self.mode_keyboard)
                return self.NewLotteryState.MODE.value
            return self.NewLotteryState.DATE.value

        date_str = update.message.text
        utc_time = parse_date(date_str)


        await self.firebase_db.update(f"lotteries/{update.effective_user.id}/{context.user_data['lottery_id']}", {
            "until_date": utc_time.isoformat()
        })

        publisher_keyboard = await self.get_publisher_channels_keyboard(update, context)
        if utc_time:
            await update.message.reply_text(self.lottery_publisher_guide,
                                            reply_markup=publisher_keyboard)
            return self.NewLotteryState.PUBLISHER.value

        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É." + self.lottery_date_guide, reply_markup=self.back_keyboard)
        return self.NewLotteryState.DATE.value

    async def lottery_publisher(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query

        if query.data == "back_data":
            await query.edit_message_text(self.lottery_mode_guide,
                                          reply_markup=self.mode_keyboard)
            return self.NewLotteryState.MODE.value

        await self.firebase_db.update(f"lotteries/{update.effective_user.id}/{context.user_data['lottery_id']}", {
            "publisher_chat_id": int(query.data)
        })
        await self.publish_lottery(update, context)
        return ConversationHandler.END

    async def publish_lottery(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        lottery_id = context.user_data["lottery_id"]
        description = await self.firebase_db.read(
            f"lotteries/{update.effective_user.id}/{lottery_id}/description")
        chat_id = await self.firebase_db.read(
            f"lotteries/{update.effective_user.id}/{lottery_id}/publisher_chat_id")
        num_winners = await self.firebase_db.read(
            f"lotteries/{update.effective_user.id}/{lottery_id}/num_winners"
        )
        date = await self.firebase_db.read(
            f"lotteries/{update.effective_user.id}/{lottery_id}/until_date")
        if date:
            date = datetime.fromisoformat(date)
            context.job_queue.run_once(self.randomise_job.date_result, when=date, data=
            {
                "owner_id": update.effective_user.id,
                "lottery_id": lottery_id,
                "publisher_chat_id": chat_id,
                "num_winners": num_winners
            })
            return
        max_count = await self.firebase_db.read(
            f"lotteries/{update.effective_user.id}/{lottery_id}/max_count"
        )
        interval_seconds = 60 * 10
        context.job_queue.run_repeating(self.randomise_job.check_lottery_count, interval=interval_seconds, first=0, data=
        {
            "owner_id": update.effective_user.id,
            "lottery_id": lottery_id,
            "goal_participants": max_count,
            "publisher_chat_id": chat_id,
            "num_winners": num_winners
        })
        lottery_url = await self.generate_invite_link(update, context)
        await context.bot.send_message(chat_id=update.effective_user.id,
                                       text=f"–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n")
        await context.bot.send_message(
            chat_id=chat_id, text=f'{description}\n–î–ª—è —É—á–∞—Å—Ç–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="{lottery_url}">—Å—Å—ã–ª–∫–µ</a>',
            parse_mode="HTML"
        )

    async def generate_invite_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        bot_username = "t_ad_manager_bot"

        lottery_id = context.user_data["lottery_id"]
        user_id = update.effective_user.id
        encoded_payload = encode_payload(user_id, lottery_id)

        url = f"https://t.me/{bot_username}?start={encoded_payload}"
        return url